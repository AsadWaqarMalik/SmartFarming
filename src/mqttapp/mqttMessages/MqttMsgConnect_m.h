//
// Generated file, do not edit! Created by nedtool 4.6 from inet/applications/mqttapp/mqttMessages/MqttMsgConnect.msg.
//

#ifndef _INET_MQTTMSGCONNECT_M_H_
#define _INET_MQTTMSGCONNECT_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

// cplusplus {{
        #include "inet/common/INETDefs.h"
        #include "MqttMsgBase_m.h"
// }}

/**
 * Class generated from <tt>inet/applications/mqttapp/mqttMessages/MqttMsgConnect.msg:27</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet MqttMsgConnect
 * {
 *     int expectedReplyLength; // in bytes
 *     double replyDelay;       // reply after this many seconds
 *     bool serverClose;
 * 
 *     string type;
 *     // duplicate delivery
 *     bool dupFlag;
 *     // quality of service level
 *     int qosLevel;
 *     // retain flag
 *     bool retain;
 *     // message identifier
 *     string messageId;
 * 
 *     // protocol name
 *     string protocolName;
 *     // protocol version
 *     string protocolVersion;
 *     // client identifier
 *     string clientId;
 *     // will retain flag
 *     bool willRetain;
 *     // will quality of service level
 *     string willQosLevel;
 *     // will flag
 *     bool willFlag;
 *     // will topic
 *     string willTopic;
 *     // will message
 *     string willMessage;
 *     // username
 *     string username;
 *     // password
 *     string password;
 *     // clean session flag
 *     bool cleanSession;
 *     // keep alive period (in sec)
 *     unsigned short keepAlivePeriod;
 * 
 *     bool isBroker;
 * }
 * </pre>
 */
class MqttMsgConnect : public ::cPacket
{
  protected:
    int expectedReplyLength_var;
    double replyDelay_var;
    bool serverClose_var;
    opp_string type_var;
    bool dupFlag_var;
    int qosLevel_var;
    bool retain_var;
    opp_string messageId_var;
    opp_string protocolName_var;
    opp_string protocolVersion_var;
    opp_string clientId_var;
    bool willRetain_var;
    opp_string willQosLevel_var;
    bool willFlag_var;
    opp_string willTopic_var;
    opp_string willMessage_var;
    opp_string username_var;
    opp_string password_var;
    bool cleanSession_var;
    unsigned short keepAlivePeriod_var;
    bool isBroker_var;

  private:
    void copy(const MqttMsgConnect& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MqttMsgConnect&);

  public:
    MqttMsgConnect(const char *name=NULL, int kind=0);
    MqttMsgConnect(const MqttMsgConnect& other);
    virtual ~MqttMsgConnect();
    MqttMsgConnect& operator=(const MqttMsgConnect& other);
    virtual MqttMsgConnect *dup() const {return new MqttMsgConnect(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getExpectedReplyLength() const;
    virtual void setExpectedReplyLength(int expectedReplyLength);
    virtual double getReplyDelay() const;
    virtual void setReplyDelay(double replyDelay);
    virtual bool getServerClose() const;
    virtual void setServerClose(bool serverClose);
    virtual const char * getType() const;
    virtual void setType(const char * type);
    virtual bool getDupFlag() const;
    virtual void setDupFlag(bool dupFlag);
    virtual int getQosLevel() const;
    virtual void setQosLevel(int qosLevel);
    virtual bool getRetain() const;
    virtual void setRetain(bool retain);
    virtual const char * getMessageId() const;
    virtual void setMessageId(const char * messageId);
    virtual const char * getProtocolName() const;
    virtual void setProtocolName(const char * protocolName);
    virtual const char * getProtocolVersion() const;
    virtual void setProtocolVersion(const char * protocolVersion);
    virtual const char * getClientId() const;
    virtual void setClientId(const char * clientId);
    virtual bool getWillRetain() const;
    virtual void setWillRetain(bool willRetain);
    virtual const char * getWillQosLevel() const;
    virtual void setWillQosLevel(const char * willQosLevel);
    virtual bool getWillFlag() const;
    virtual void setWillFlag(bool willFlag);
    virtual const char * getWillTopic() const;
    virtual void setWillTopic(const char * willTopic);
    virtual const char * getWillMessage() const;
    virtual void setWillMessage(const char * willMessage);
    virtual const char * getUsername() const;
    virtual void setUsername(const char * username);
    virtual const char * getPassword() const;
    virtual void setPassword(const char * password);
    virtual bool getCleanSession() const;
    virtual void setCleanSession(bool cleanSession);
    virtual unsigned short getKeepAlivePeriod() const;
    virtual void setKeepAlivePeriod(unsigned short keepAlivePeriod);
    virtual bool getIsBroker() const;
    virtual void setIsBroker(bool isBroker);
};

inline void doPacking(cCommBuffer *b, MqttMsgConnect& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MqttMsgConnect& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef _INET_MQTTMSGCONNECT_M_H_

